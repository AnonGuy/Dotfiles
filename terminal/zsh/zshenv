# vim:foldmethod=marker

# Custom aliases          {{{
alias sl="ls"
alias git='hub'
alias tree='exa --tree'
alias cp="rsync -vz --progress"
alias delta="delta --color-only"
alias cat="bat -p --theme base16"
alias grip='grip --pass $GITHUB_TOKEN'
alias wpm="wpm --stats-file ~/.config/wpm/stats.csv"

function smloadr() {
  # Start SMLoadr with preferred settings.
  cd ~/.config/smloadr
  /bin/smloadr -q FLAC -p ~/Music $1 <<< $DEEZER_COOKIE
  cd -
}

function nvim() {
  # If already inside a neovim terminal, open a new tab instead.
  [[ -z "$NVIM" ]] && /usr/bin/nvim "$@" || nvr --remote-wait -cc "tabnew $@ | set nu"
}

function clean() {
  # Delete all files in the current directory, except hidden files.
  find -maxdepth 1 -type f -iname "[^.]*" -exec rm {} +
}

function seclude() {
  # Take the provided files, move them to a temp directory, and move there.
  TEMP=$(mktemp -d /tmp/Temp-XXX)
  [[ -f $1 ]] && mv $@ -t $TEMP
  cd $TEMP
}

function add-secret() {
  # Add secrets to the specified kubectl project.
  kubectl patch secret $1 --patch="{\"stringData\":{\"$2\": \"$3\"}}"
}

function ractf() {
  # Execute docker-compose commands on ractf infrastructure.
  ssh -t ractf cd /srv/ractf/$1 "&&" docker-compose ${@:2}
}

function gdelta() {
  # Run git diff through a colorizer.
  git diff $@ | delta
}

function eyaml-edit() {
  # Edit encrypted RACTF puppet data.
  puppet_repo=$HOME/Documents/Programming/ractf/puppet
  eyaml edit $1 -n \
    gpg --gpg-always-trust \
        --gpg-gnupghome $puppet_repo/.eyaml-gpg/ \
        --gpg-recipients-file \
    $puppet_repo/hiera-eyaml-gpg.recipients
}

function password() {
  # Get a password from keepass without it appearing on clipmenu.
  clipctl disable
  keepassxc-cli clip ~/.gnupg/passwords.kdbx "$1"
  clipctl enable
}
# }}}

# Configuration options   {{{
watch=(notme)
LOGCHECK=60
REPORTTIME=5
WORDCHARS='`~!@#$%^&*()-_=+[{]}\|;:",<.>/?'"'"

HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000

setopt append_history           # Don't overwrite history.
setopt extended_history         # Also record time and duration of commands.
setopt share_history            # Share history between multiple shells.
setopt hist_expire_dups_first   # Clear duplicates when trimming internal hist.
setopt hist_find_no_dups        # Don't display duplicates during searches.
setopt hist_ignore_dups         # Ignore consecutive duplicates.
setopt hist_ignore_all_dups     # Remember only one unique copy of the command.
setopt hist_reduce_blanks       # Remove superfluous blanks.
setopt hist_save_no_dups        # Omit older commands in favor of newer ones.

setopt promptsubst              # Enable prompt substitutions.
setopt pushd_ignore_dups        # Dont push copies of the same dir on stack.
setopt pushd_minus              # Reference stack entries with "-".

setopt extended_glob            # We like the glob.
# }}}

# Key bindings            {{{
bindkey "^a" beginning-of-line
bindkey "^e" end-of-line
bindkey "^f" forward-word
bindkey "^b" backward-word
bindkey "^k" kill-line
bindkey "^d" delete-char
bindkey "^y" accept-and-hold
bindkey "^w" backward-kill-word
bindkey "^u" backward-kill-line
bindkey "^R" history-incremental-pattern-search-backward
bindkey "^F" history-incremental-pattern-search-forward
bindkey "^i" expand-or-complete-prefix
bindkey '^[^?' backward-kill-word
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word

zle -N tcsh-backward-word
bindkey '\e[1;3D' tcsh-backward-word
bindkey '\e^[[D' tcsh-backward-word

zle -N tcsh-forward-word
bindkey '\e[1;3C' tcsh-forward-word
bindkey '\e^[[C' tcsh-backward-word

tcsh-backward-delete-word () {
  local WORDCHARS="${WORDCHARS:s#/#}"
  zle backward-delete-word
}

zle -N tcsh-backward-delete-word
bindkey "^[^?" tcsh-backward-delete-word
# }}}

# Styling                 {{{
zstyle ':completion:*' rehash true
zstyle ":completion:*" matcher-list \
  "m:{a-zA-Z}={A-Za-z}" \
  "r:|[._-]=* r:|=*" \
  "l:|=* r:|=*"

zstyle ":completion:*:default" list-colors ${(s.:.)LS_COLORS}
# }}}

# SSH agent configuration {{{
if ! pgrep -u "$USER" ssh-agent > /dev/null; then
    # If the SSH agent isn't already running, start it.
    ssh-agent -t 24h > "/tmp/ssh-agent.env"
fi
if [[ ! "$SSH_AUTH_SOCK" ]]; then
    # If we don't have the right env vars, source them.
    source "/tmp/ssh-agent.env" >/dev/null
fi
# }}} 

# PATH shims and env vars {{{
export DOCKER_BUILDKIT=1
export PYTHONPYCACHEPREFIX=/tmp
export PYENV_ROOT="$HOME/.pyenv"
export NVIM_LISTEN_ADDRESS=/tmp/nvimsocket 

# Env vars and other secret stuff that won't be committed to git.
source ~/.secrets.zsh

# Apply all our PATH shims all at once!
export PATH="/opt/cuda/bin/:$HOME/.poetry/bin:$HOME/.cargo/bin:$PYENV_ROOT/shims:$PYENV_ROOT/bin:/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:$HOME/.gem/ruby/2.7.0/bin:/opt/resolve/bin:$HOME/.cabal/bin:$HOME/.gem/ruby/2.6.0/bin:$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$HOME/Documents/.go/bin:$HOME/.luarocks/bin:$HOME/.local/bin:/usr/lib/jvm/java-8-openjdk/bin:$HOME/.local/bin/git-fuzzy/bin:/usr/lib/jvm/default/bin:/usr/bin/core_perl"

eval "$(pyenv init --path)"
eval "$(pyenv init -)"
# }}}

# SSH agent configuration {{{
if ! pgrep -u "$USER" ssh-agent > /dev/null; then
    ssh-agent -t 12h > "$XDG_RUNTIME_DIR/ssh-agent.env"
fi
if [[ ! "$SSH_AUTH_SOCK" ]]; then
    source "$XDG_RUNTIME_DIR/ssh-agent.env" >/dev/null
fi
# }}}

# Misc                    {{{
if [[ -z $DISPLAY ]] && [[ $(tty) = /dev/tty1 ]]
then
  # If there is no display and we're on TTY1, start Xorg.
  startx >/dev/null 2>/dev/null
fi
# }}}
